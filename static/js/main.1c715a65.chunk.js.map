{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","style","backgroundColor","color","rows","newText","toUpperCase","toLowerCase","arr","split","i","length","charAt","slice","join","document","getElementById","select","navigator","clipboard","writeText","filter","element","Alert","alert","word","lower","capitalize","msg","prototype","PropTypes","string","isRequired","aboutText","defaultProps","App","setMode","setAlert","showAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1c715a65.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n             <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n       \r\n        \r\n      </ul>\r\n      {/* <div className=\"d-flex\">\r\n<div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}}  style={{height:'30px', width:'30px', cursor:'pointer'}}></div>\r\n<div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger')}}  style={{height:'30px', width:'30px', cursor:'pointer'}}></div>\r\n<div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success')}}  style={{height:'30px', width:'30px', cursor:'pointer'}}></div>\r\n<div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning')}}  style={{height:'30px', width:'30px', cursor:'pointer'}}></div>\r\n</div> */}\r\n\r\n\r\n      <div className={`form-check form-switch text-${props.mode==='dark'? 'light':'dark'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Israil's code\",\r\n    aboutText:'About Us'\r\n\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick =() => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        // props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleCapClick =() => {\r\n        let arr = text.split(\" \");\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n        }\r\n        \r\n       let newText = arr.join(\" \");\r\n        setText(newText);\r\n        // props.showAlert(\"Converted to capitalize!\", \"success\");\r\n    }\r\n    const handleLoClick =() => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        // props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n    const handleCopy =() => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        // props.showAlert(\"text has been copied!\", \"success\");\r\n    }\r\n    const handleSpace =() => {\r\n        let newText= text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        // props.showAlert(\"Extra spaces has been removed!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick =() => {\r\n        let newText = '';\r\n        setText(newText)\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n<>\r\n        <div className='container'>\r\n           <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n               \r\n             <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode ==='dark'? '#102542': 'white', color: props.mode==='dark'? 'white': 'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary m-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n            <button className=\"btn btn-warning m-1\" onClick={handleLoClick}>Convert to lowercase</button>\r\n            <button className=\"btn btn-info m-1\" onClick={handleCapClick}>Convert to Capitalize</button>\r\n            <button className=\"btn btn-info m-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-info m-1\" onClick={handleSpace}>Remove Extra spaces</button>\r\n            <button className=\"btn btn-danger m-1\" onClick={handleClearClick}>clear</button>\r\n        </div>\r\n        <div className='container my-4'>\r\n<h2>Your Text Summary</h2>\r\n<p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n<p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n<h2>Preview</h2>\r\n<p>{text.length>0? text: 'Enter something in the textbox above to preview here'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}:</strong> {props.alert.msg} \r\n  \r\n</div>\r\n      \r\n    )\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react'\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');// whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert = (message, type) => {\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1800)\n  }\n  \n  // const remmoveClasses =()=>{\n  //   document.body.classList.remove('bg-primary')\n  //   document.body.classList.remove('bg-light')\n  //   document.body.classList.remove('bg-danger')\n  \n  //   document.body.classList.remove('bg-dark')\n  //   document.body.classList.remove('bg-warning')\n  // }\n\n  const toggleMode = ()  => {\n    // remmoveClasses();\n    //   document.body.classList.add('bg-'+cls)\n    if(mode === 'dark'){\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - light mode\";\n      // setInterval(()=>{\n      //   document.title = \"Created by Israil\";\n      // },2000);\n      // setInterval(()=>{\n      //   document.title = \"with Love\";\n      // },1500);\n\n    }\n    else{\n      setMode('dark');\n      document.body.style.backgroundColor = '#102542';\n      document.body.style.color = 'white';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark mode\";\n\n    }\n  }\n  return (\n    <>\n \n     <Navbar title='TextUtils' mode={mode} toggleMode= {toggleMode} />\n     <Alert alert={alert}/>\n\n     <div className=\"container my-3\">\n\n       \n         \n       \n           \n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} toggleMode= {toggleMode} />\n        \n   \n    \n       \n     </div>\n  \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}